(cornerstone
  (Program   (#name (* TopLevel)))
  (TopLevel  (| StrTable Struct Def Decl))
  (StrTable  (str-table (* StrEntry)))
  (StrEntry  (#nat #string))
  (Struct    (struct #name (* Field)))
  (Field     (#name #type))
  (Decl      (decl #name Types #type))
  (Def       (def #name Params #type (* Stmt)))

  (Stmt      (| Let Return If Store Auto CallLike Do))
  (Let       (let #name Expr))
  (If        (if Expr (* Stmt)))
  (Return    (| RetVoid RetExpr))
  (RetVoid   (return void))
  (RetExpr   (return Expr #type))
  (Store     (store Expr #type Expr))
  (Auto      (auto #name #type))
  (Do        (do (* Stmt)))

  (CallLike  (| Call CallVargs CallTail Become))
  (Call      (call #name Types #type Args))
  (CallVargs (call-vargs #name Types #type Args))
  (CallTail  (call-tail  #name Types #type Args))
  (Become    (become     #name Types #type Args))
  (Args      (args (* Expr)))
  
  (Expr      (| CallLike Binop Load Index Cast Value))
  (Load      (load Type Expr))
  (Index     (index Expr Type Expr))
  (Cast      (cast Type Type Expr))

  (Binop     (| Add Icmp))
  (Icmp      (| LT LE GT GE EQ NE))
  (Add       (+  Type Expr Expr))
  (LT        (<  Type Expr Expr))
  (LE        (<= Type Expr Expr))
  (GT        (>  Type Expr Expr))
  (GE        (>= Type Expr Expr))
  (EQ        (== Type Expr Expr))
  (NE        (!= Type Expr Expr))

  (Value     (| Literal StrGet #name))
  (Literal   (| #int true false))
  (StrGet    (str-get #int))

  (Types     (types (* #type)))
  (Params    (params (* Param)))
  (Param     (#name #type))
)
