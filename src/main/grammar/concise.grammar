(cornerstone
  (Program
    (#name
      (*
        (|
          (str-table (* (#nat #string)))
          (struct #name (* (#name #type)))
          (def #name Params #type (* Stmt))
          (decl #name Types)))))

  (Stmt      (| Let Return If Store Auto CallLike Do))
  (Let       (let #name Expr))
  (If        (if Expr (* Stmt)))
  (Return    (| (return void) (return Expr Type)))
  (Store     (store Expr Type Expr))
  (Auto      (auto #name Type))
  (Do        (do (* Stmt)))

  (CallLike  (| Call CallVargs CallTail Become))
  (Call      (call #name Types #type Args))
  (CallVargs (call-vargs #name Types #type Args))
  (CallTail  (call-tail  #name Types #type Args))
  (Become    (become     #name Types #type Args))
  (Args      (args (* Expr)))
  
  (Expr      (| CallLike Binop Load Index Cast Value))
  (Load      (load Type Expr))
  (Index     (index Expr Type Expr))
  (Cast      (cast Type Type Expr))

  (Binop     (| Add Icmp))
  (Icmp      (|  LT LE GT GE EQ NE))
  (Add       (+  Type Expr Expr))
  (LT        (<  Type Expr Expr))
  (LE        (<= Type Expr Expr))
  (GT        (>  Type Expr Expr))
  (GE        (>= Type Expr Expr))
  (EQ        (== Type Expr Expr))
  (NE        (!= Type Expr Expr))

  (Value     (| Literal #name StrGet))
  (Literal   (| #int true false))
  (StrGet    (str-get #int))

  (Types     (types (* #type)))
  (Params    (params (* (#name #type))))
)
